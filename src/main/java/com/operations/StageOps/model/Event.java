package com.operations.StageOps.model;

import java.time.ZonedDateTime;
import java.util.Date;

/**
 * Represents an event held in a specific room.
 * This class contains details about the event such as the event ID, name, date,
 * start and end times, available and sold tickets, event type, revenue, and layout ID.
 */
public class Event {

    private int eventId;
    private String eventName;
    private Date eventDate;
    private int roomId;
    private int ticketsAvailable;
    private int ticketsSold;
    private String eventType;
    private double totalRevenue;
    private ZonedDateTime startTime;
    private ZonedDateTime endTime;
    private int layoutId;  // Link to the layout used for the event

    /**
     * Default constructor for the Event class.
     */
    public Event() {}

    /**
     * Parameterized constructor for creating an Event instance.
     *
     * @param eventId        The unique ID of the event
     * @param eventName      The name of the event
     * @param eventDate      The date of the event
     * @param startTime      The start time of the event
     * @param endTime        The end time of the event
     * @param roomId         The ID of the room where the event is held
     * @param ticketsAvailable The number of tickets available for the event
     * @param ticketsSold    The number of tickets sold for the event
     * @param eventType      The type of the event (e.g., concert, conference)
     * @param totalRevenue   The total revenue generated by the event
     * @param layoutId       The ID of the layout used for the event
     */
    public Event(int eventId, String eventName, Date eventDate, ZonedDateTime startTime, ZonedDateTime endTime, int roomId, int ticketsAvailable, int ticketsSold, String eventType, double totalRevenue, int layoutId) {
        this.eventId = eventId;
        this.eventName = eventName;
        this.eventDate = eventDate;
        this.startTime = startTime;
        this.endTime = endTime;
        this.roomId = roomId;
        this.ticketsAvailable = ticketsAvailable;
        this.ticketsSold = ticketsSold;
        this.eventType = eventType;
        this.totalRevenue = totalRevenue;
        this.layoutId = layoutId;
    }

    /**
     * Gets the unique event ID.
     *
     * @return The event ID
     */
    public int getEventId() {
        return eventId;
    }

    /**
     * Sets the event ID.
     *
     * @param eventId The event ID to set
     */
    public void setEventId(int eventId) {
        this.eventId = eventId;
    }

    /**
     * Gets the name of the event.
     *
     * @return The event name
     */
    public String getEventName() {
        return eventName;
    }

    /**
     * Sets the name of the event.
     *
     * @param eventName The event name to set
     */
    public void setEventName(String eventName) {
        this.eventName = eventName;
    }

    /**
     * Gets the date of the event.
     *
     * @return The event date
     */
    public Date getEventDate() {
        return eventDate;
    }

    /**
     * Sets the date of the event.
     *
     * @param eventDate The event date to set
     */
    public void setEventDate(Date eventDate) {
        this.eventDate = eventDate;
    }

    /**
     * Gets the ID of the room where the event is held.
     *
     * @return The room ID
     */
    public int getRoomId() {
        return roomId;
    }

    /**
     * Sets the room ID where the event is held.
     *
     * @param roomId The room ID to set
     */
    public void setRoomId(int roomId) {
        this.roomId = roomId;
    }

    /**
     * Gets the number of tickets available for the event.
     *
     * @return The number of tickets available
     */
    public int getTicketsAvailable() {
        return ticketsAvailable;
    }

    /**
     * Sets the number of tickets available for the event.
     *
     * @param ticketsAvailable The number of tickets available to set
     */
    public void setTicketsAvailable(int ticketsAvailable) {
        this.ticketsAvailable = ticketsAvailable;
    }

    /**
     * Gets the number of tickets sold for the event.
     *
     * @return The number of tickets sold
     */
    public int getTicketsSold() {
        return ticketsSold;
    }

    /**
     * Sets the number of tickets sold for the event.
     *
     * @param ticketsSold The number of tickets sold to set
     */
    public void setTicketsSold(int ticketsSold) {
        this.ticketsSold = ticketsSold;
    }

    /**
     * Gets the event type (e.g., concert, conference).
     *
     * @return The event type
     */
    public String getEventType() {
        return eventType;
    }

    /**
     * Sets the event type.
     *
     * @param eventType The event type to set
     */
    public void setEventType(String eventType) {
        this.eventType = eventType;
    }

    /**
     * Gets the total revenue generated by the event.
     * This method calculates the total revenue based on the number of tickets sold
     * and the ticket price (defaulted to 25 in this case).
     *
     * @return The total revenue generated by the event
     */
    public double getTotalRevenue() {
        return calculateRevenue(25);
    }

    /**
     * Sets the total revenue generated by the event.
     *
     * @param totalRevenue The total revenue to set
     */
    public void setTotalRevenue(double totalRevenue) {
        this.totalRevenue = totalRevenue;
    }

    /**
     * Gets the layout ID used for the event.
     *
     * @return The layout ID
     */
    public int getLayoutId() {
        return layoutId;
    }

    /**
     * Sets the layout ID used for the event.
     *
     * @param layoutId The layout ID to set
     */
    public void setLayoutId(int layoutId) {
        this.layoutId = layoutId;
    }

    /**
     * Gets the start time of the event.
     *
     * @return The start time of the event
     */
    public ZonedDateTime getStartTime() {
        return startTime;
    }

    /**
     * Sets the start time of the event.
     *
     * @param startTime The start time to set
     */
    public void setStartTime(ZonedDateTime startTime) {
        this.startTime = startTime;
    }

    /**
     * Gets the end time of the event.
     *
     * @return The end time of the event
     */
    public ZonedDateTime getEndTime() {
        return endTime;
    }

    /**
     * Sets the end time of the event.
     *
     * @param endTime The end time to set
     */
    public void setEndTime(ZonedDateTime endTime) {
        this.endTime = endTime;
    }

    /**
     * Calculates the total revenue for the event based on the number of tickets sold
     * and the ticket price.
     *
     * @param ticketPrice The price of one ticket
     * @return The total revenue generated from the event
     */
    public double calculateRevenue(double ticketPrice) {
        return ticketsSold * ticketPrice;
    }
}
